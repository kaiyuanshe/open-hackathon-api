<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActivityLog_Hackathon_addTeamMember" xml:space="preserve">
    <value>Team "{teamName}" has a new member "{memberName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_approveEnrollment" xml:space="preserve">
    <value>Enrollment request of user "{enrolledUser}" is approved by "{adminName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_approveHackahton" xml:space="preserve">
    <value>Hackathon is approved by an admin and becomes online.</value>
  </data>
  <data name="ActivityLog_Hackathon_approveTeamMember" xml:space="preserve">
    <value>Membership request of user "{memberName}" to join team "{teamName}" is approved.</value>
  </data>
  <data name="ActivityLog_Hackathon_archiveHackathon" xml:space="preserve">
    <value>The hackathon becomes ReadOnly.</value>
  </data>
  <data name="ActivityLog_Hackathon_createAward" xml:space="preserve">
    <value>A new award "{awardName}" is created by "{userName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_createAwardAssignmentIndividual" xml:space="preserve">
    <value>User "{userName}" is awarded "{awardName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_createAwardAssignmentTeam" xml:space="preserve">
    <value>Team "{teamName}" is awarded "{awardName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_createEnrollment" xml:space="preserve">
    <value>user enrolled successfully: {userName}</value>
  </data>
  <data name="ActivityLog_Hackathon_createHackathon" xml:space="preserve">
    <value>Created by user: {userName}.</value>
  </data>
  <data name="ActivityLog_Hackathon_createHackathonAdmin" xml:space="preserve">
    <value>"{adminUser}" is added as an administrator by "{userName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_createJudge" xml:space="preserve">
    <value>Admin '{userName}' added a judge: '{judgeName}'</value>
  </data>
  <data name="ActivityLog_Hackathon_createRating" xml:space="preserve">
    <value>Hackathon judge "{judgeName}" rated team "{teamName}" on kind "{kindName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_createRatingKind" xml:space="preserve">
    <value>Admin "{userName}" created a new rating kind: {ratingKind}.</value>
  </data>
  <data name="ActivityLog_Hackathon_createTeam" xml:space="preserve">
    <value>A new team '{teamName}' is created by {userName}.</value>
  </data>
  <data name="ActivityLog_Hackathon_createTeamWork" xml:space="preserve">
    <value>User "{userName}" added a new work for team "{teamName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_deleteAward" xml:space="preserve">
    <value>Admin "{adminName}" removed award "{awardName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_deleteAwardAssignment" xml:space="preserve">
    <value>An assignment on award "{awardName}" is revoked by "{adminName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_deleteHackathon" xml:space="preserve">
    <value>Deleted by user: {userName}</value>
  </data>
  <data name="ActivityLog_Hackathon_deleteHackathonAdmin" xml:space="preserve">
    <value>Admin '{userName}' removed another admin '{adminName}'.</value>
  </data>
  <data name="ActivityLog_Hackathon_deleteJudge" xml:space="preserve">
    <value>Judge '{judgeName}' is deleted by admin '{userName}'</value>
  </data>
  <data name="ActivityLog_Hackathon_deleteRating" xml:space="preserve">
    <value>Judge "{judgeName}" removed a rating.</value>
  </data>
  <data name="ActivityLog_Hackathon_deleteRatingKind" xml:space="preserve">
    <value>Admin "{adminName}" deleted rating kind "{ratingKind}".</value>
  </data>
  <data name="ActivityLog_Hackathon_deleteTeam" xml:space="preserve">
    <value>Team "{teamName}" dismissed by user "{adminName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_deleteTeamMember" xml:space="preserve">
    <value>One of the admins removed member "{memberName}" from team "{teamName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_deleteTeamWork" xml:space="preserve">
    <value>A team work is removed from team "{teamName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_joinTeam" xml:space="preserve">
    <value>User "{memberName}" requested to join team "{teamName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_leaveTeam" xml:space="preserve">
    <value>Member "{memberName}" left team "{teamName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_publishHackathon" xml:space="preserve">
    <value>Ready to go online, waiting for approval. Requested by: {userName}</value>
  </data>
  <data name="ActivityLog_Hackathon_rejectEnrollment" xml:space="preserve">
    <value>Enrollment request of user "{enrolledUser}" is rejected by "{adminName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_unarchiveHackathon" xml:space="preserve">
    <value>The hackathon becomes Writable.</value>
  </data>
  <data name="ActivityLog_Hackathon_updateAwardAssignment" xml:space="preserve">
    <value>Admin "{adminName}" updated an assignment on award "{awardName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_updateEnrollment" xml:space="preserve">
    <value>Enrollment info of user "{userName}" updated.</value>
  </data>
  <data name="ActivityLog_Hackathon_updateHackathon" xml:space="preserve">
    <value>Updated by user: {userName}.</value>
  </data>
  <data name="ActivityLog_Hackathon_updateJudge" xml:space="preserve">
    <value>Admin '{userName}' updated judge: '{judgeName}'</value>
  </data>
  <data name="ActivityLog_Hackathon_updateRatingKind" xml:space="preserve">
    <value>Admin "{adminName}" updated rating kind "{ratingKind}".</value>
  </data>
  <data name="ActivityLog_Hackathon_updateTeam" xml:space="preserve">
    <value>Team "{teamName}" updated by user "{adminName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_updateTeamMember" xml:space="preserve">
    <value>Info of member "{memberName}" in team "{teamName}" updated.</value>
  </data>
  <data name="ActivityLog_Hackathon_updateTeamMemberRole" xml:space="preserve">
    <value>"{adminName}" updated the role of team member "{memberName}".</value>
  </data>
  <data name="ActivityLog_Hackathon_updateTeamWork" xml:space="preserve">
    <value>Team "{teamName}" updated a work.</value>
  </data>
  <data name="ActivityLog_Team_addTeamMember" xml:space="preserve">
    <value>Invited a new team member "{memberName}" by admin "{adminName}".</value>
  </data>
  <data name="ActivityLog_Team_approveTeamMember" xml:space="preserve">
    <value>Membership request of user "{memberName}" is approved by "{adminName}".</value>
  </data>
  <data name="ActivityLog_Team_createAwardAssignmentTeam" xml:space="preserve">
    <value>The team is awarded "{awardName}".</value>
  </data>
  <data name="ActivityLog_Team_createRating" xml:space="preserve">
    <value>Rated on kind "{kindName}" by judge "{judgeName}".</value>
  </data>
  <data name="ActivityLog_Team_createTeam" xml:space="preserve">
    <value>Team created by '{userName}'.</value>
  </data>
  <data name="ActivityLog_Team_createTeamWork" xml:space="preserve">
    <value>User "{userName}" added a new work.</value>
  </data>
  <data name="ActivityLog_Team_deleteAwardAssignment" xml:space="preserve">
    <value>An assignment on award "{awardName}" is revoked by "{adminName}".</value>
  </data>
  <data name="ActivityLog_Team_deleteTeam" xml:space="preserve">
    <value>Team dismissed by user "{adminName}".</value>
  </data>
  <data name="ActivityLog_Team_deleteTeamMember" xml:space="preserve">
    <value>Removed team member "{memberName}" or rejected the membership request.</value>
  </data>
  <data name="ActivityLog_Team_deleteTeamWork" xml:space="preserve">
    <value>Member "{memberName}" deleted a team work.</value>
  </data>
  <data name="ActivityLog_Team_joinTeam" xml:space="preserve">
    <value>User "{memberName}" requested to join team.</value>
  </data>
  <data name="ActivityLog_Team_leaveTeam" xml:space="preserve">
    <value>Member "{memberName}" left the team.</value>
  </data>
  <data name="ActivityLog_Team_updateAwardAssignment" xml:space="preserve">
    <value>Admin "{adminName}" updated an assignment on award "{awardName}".</value>
  </data>
  <data name="ActivityLog_Team_updateTeam" xml:space="preserve">
    <value>Team info updated by user "{adminName}".</value>
  </data>
  <data name="ActivityLog_Team_updateTeamMember" xml:space="preserve">
    <value>Info of member "{memberName}" is updated.</value>
  </data>
  <data name="ActivityLog_Team_updateTeamMemberRole" xml:space="preserve">
    <value>"{adminName}" updated the role of team member "{memberName}".</value>
  </data>
  <data name="ActivityLog_Team_updateTeamWork" xml:space="preserve">
    <value>Member "{memberName}" updated a team work.</value>
  </data>
  <data name="ActivityLog_User_addTeamMember" xml:space="preserve">
    <value>[{hackathonName}]Added a new memeber "{memberName}" to team "{teamName}".</value>
  </data>
  <data name="ActivityLog_User_addTeamMember2" xml:space="preserve">
    <value>[{hackathonName}]Added as a new member to team "{teamName}" by "{adminName}".</value>
  </data>
  <data name="ActivityLog_User_approveEnrollment" xml:space="preserve">
    <value>[{hackathonName}]Approved enrollment of user "{enrolledUser}".</value>
  </data>
  <data name="ActivityLog_User_approveEnrollment2" xml:space="preserve">
    <value>[{hackathonName}]Enrollment approved by admin "{adminName}"</value>
  </data>
  <data name="ActivityLog_User_approveHackahton" xml:space="preserve">
    <value>[{hackathonName}]Approved and published hackathon.</value>
  </data>
  <data name="ActivityLog_User_approveTeamMember" xml:space="preserve">
    <value>[{hackathonName}]Approved membership request of user "{memberName}" to join team "{teamName}".</value>
  </data>
  <data name="ActivityLog_User_approveTeamMember2" xml:space="preserve">
    <value>[{hackathonName}]Membership request to join team "{teamName}" is approved by "{adminName}".</value>
  </data>
  <data name="ActivityLog_User_archiveHackathon" xml:space="preserve">
    <value>[{hackathonName}]Updated hackathon to ReadOnly.</value>
  </data>
  <data name="ActivityLog_User_createAward" xml:space="preserve">
    <value>[{hackathonName}]Created a new award "{awardName}".</value>
  </data>
  <data name="ActivityLog_User_createAwardAssignmentIndividual" xml:space="preserve">
    <value>[{hackathonName}]Awards "{awardName}" to "{userName}".</value>
  </data>
  <data name="ActivityLog_User_createAwardAssignmentIndividual2" xml:space="preserve">
    <value>[{hackathonName}]Awarded "{awardName}".</value>
  </data>
  <data name="ActivityLog_User_createAwardAssignmentTeam" xml:space="preserve">
    <value>[{hackathonName}]Awards "{awardName}" to "{teamName}".</value>
  </data>
  <data name="ActivityLog_User_createEnrollment" xml:space="preserve">
    <value>[{hackathonName}]enrolled in hackathon.</value>
  </data>
  <data name="ActivityLog_User_createHackathon" xml:space="preserve">
    <value>[{hackathonName}]Created a new hackathon: {hackathonName}</value>
  </data>
  <data name="ActivityLog_User_createHackathonAdmin" xml:space="preserve">
    <value>[{hackathonName}]Created or updated an admin "{adminName}".</value>
  </data>
  <data name="ActivityLog_User_createHackathonAdmin2" xml:space="preserve">
    <value>[{hackathonName}]Became an admin of the hackathon.</value>
  </data>
  <data name="ActivityLog_User_createJudge" xml:space="preserve">
    <value>[{hackathonName}]Added a new judge '{judgeName}'.</value>
  </data>
  <data name="ActivityLog_User_createRating" xml:space="preserve">
    <value>[{hackathonName}]Rated team "{teamName}" on kind "{kindName}".</value>
  </data>
  <data name="ActivityLog_User_createRatingKind" xml:space="preserve">
    <value>[{hackathonName}]Created a new rating kind '{ratingKind}'.</value>
  </data>
  <data name="ActivityLog_User_createTeam" xml:space="preserve">
    <value>[{hackathonName}]Created a new team '{teamName}'.</value>
  </data>
  <data name="ActivityLog_User_createTeamWork" xml:space="preserve">
    <value>[{hackathonName}]Added a new work for team "{teamName}".</value>
  </data>
  <data name="ActivityLog_User_deleteAward" xml:space="preserve">
    <value>[{hackathonName}]Dismissed team "{teamName}".</value>
  </data>
  <data name="ActivityLog_User_deleteAwardAssignment" xml:space="preserve">
    <value>[{hackathonName}]Revoked an assignment on award "{awardName}".</value>
  </data>
  <data name="ActivityLog_User_deleteAwardAssignment2" xml:space="preserve">
    <value>[{hackathonName}]An assignment on award "{awardName}" is revoked by "{adminName}".</value>
  </data>
  <data name="ActivityLog_User_deleteHackathon" xml:space="preserve">
    <value>[{hackathonName}]Deleted hackathon.</value>
  </data>
  <data name="ActivityLog_User_deleteHackathonAdmin" xml:space="preserve">
    <value>[{hackathonName}]Deleted an admin '{adminName}' from hackathon.</value>
  </data>
  <data name="ActivityLog_User_deleteHackathonAdmin2" xml:space="preserve">
    <value>[{hackathonName}]No longer be an admin of the hackathon.</value>
  </data>
  <data name="ActivityLog_User_deleteJudge" xml:space="preserve">
    <value>[{hackathonName}]Deleted judge '{judgeName}' of the hackathon.</value>
  </data>
  <data name="ActivityLog_User_deleteRating" xml:space="preserve">
    <value>[{hackathonName}]Removed a rating in hackathon.</value>
  </data>
  <data name="ActivityLog_User_deleteRatingKind" xml:space="preserve">
    <value>[{hackathonName}]Deleted rating kind "{ratingKind}".</value>
  </data>
  <data name="ActivityLog_User_deleteTeam" xml:space="preserve">
    <value>[{hackathonName}]Dismissed team "{teamName}".</value>
  </data>
  <data name="ActivityLog_User_deleteTeamMember" xml:space="preserve">
    <value>[{hackathonName}]Removed member "{memberName}" from team "{teamName}" or rejected the membership request.</value>
  </data>
  <data name="ActivityLog_User_deleteTeamMember2" xml:space="preserve">
    <value>[{hackathonName}]Removed from team "{teamName}" by user "{operatorName}".</value>
  </data>
  <data name="ActivityLog_User_deleteTeamWork" xml:space="preserve">
    <value>[{hackathonName}]Deleted a team work from from team "{teamName}".</value>
  </data>
  <data name="ActivityLog_User_fileUpload" xml:space="preserve">
    <value>Uploaded a new file.</value>
  </data>
  <data name="ActivityLog_User_joinTeam" xml:space="preserve">
    <value>[{hackathonName}]Requested to join team "{teamName}".</value>
  </data>
  <data name="ActivityLog_User_leaveTeam" xml:space="preserve">
    <value>[{hackathonName}]Left team "{memberName}".</value>
  </data>
  <data name="ActivityLog_User_login" xml:space="preserve">
    <value>Login successfully.</value>
  </data>
  <data name="ActivityLog_User_publishHackathon" xml:space="preserve">
    <value>[{hackathonName}]Requested to publish hackathon.</value>
  </data>
  <data name="ActivityLog_User_rejectEnrollment" xml:space="preserve">
    <value>[{hackathonName}]Rejected enrollment of user "{enrolledUser}".</value>
  </data>
  <data name="ActivityLog_User_rejectEnrollment2" xml:space="preserve">
    <value>[{hackathonName}]Enrollment rejected by admin "{adminName}"</value>
  </data>
  <data name="ActivityLog_User_unarchiveHackathon" xml:space="preserve">
    <value>[{hackathonName}]Updated hackathon as Writable.</value>
  </data>
  <data name="ActivityLog_User_updateAwardAssignment" xml:space="preserve">
    <value>[{hackathonName}]Updated an assignment on award "{awardName}".</value>
  </data>
  <data name="ActivityLog_User_updateAwardAssignment2" xml:space="preserve">
    <value>[{hackathonName}]Assignment on award "{awardName}" is updated by "{adminName}".</value>
  </data>
  <data name="ActivityLog_User_updateEnrollment" xml:space="preserve">
    <value>[{hackathonName}]Enrollment info in hackathon "{hackathonName}" updated.</value>
  </data>
  <data name="ActivityLog_User_updateEnrollment2" xml:space="preserve">
    <value>[{hackathonName}]Updated enrollment info of user "{userName}".</value>
  </data>
  <data name="ActivityLog_User_updateHackathon" xml:space="preserve">
    <value>[{hackathonName}]Updated hackathon.</value>
  </data>
  <data name="ActivityLog_User_updateJudge" xml:space="preserve">
    <value>[{hackathonName}]Updated judge '{judgeName}' for the hackathon.</value>
  </data>
  <data name="ActivityLog_User_updateRatingKind" xml:space="preserve">
    <value>[{hackathonName}]Updated rating kind "{ratingKind}".</value>
  </data>
  <data name="ActivityLog_User_updateTeam" xml:space="preserve">
    <value>[{hackathonName}]Updated team "{teamName}".</value>
  </data>
  <data name="ActivityLog_User_updateTeamMember" xml:space="preserve">
    <value>[{hackathonName}]Updated the info of member "{memberName}" in team "{teamName}".</value>
  </data>
  <data name="ActivityLog_User_updateTeamMember2" xml:space="preserve">
    <value>[{hackathonName}]Info of membership in team "{teamName}" is updated.</value>
  </data>
  <data name="ActivityLog_User_updateTeamMemberRole" xml:space="preserve">
    <value>[{hackathonName}]Updated the role of team member "{memberName}".</value>
  </data>
  <data name="ActivityLog_User_updateTeamMemberRole2" xml:space="preserve">
    <value>[{hackathonName}]User "{adminName}" updated your role in team "{teamName}".</value>
  </data>
  <data name="ActivityLog_User_updateTeamWork" xml:space="preserve">
    <value>[{hackathonName}]Updated a work of team "{teamName}".</value>
  </data>
  <data name="Admin_CannotDeleteCreator" xml:space="preserve">
    <value>The creator of a hackathon cannot be deleted.</value>
  </data>
  <data name="Admin_NotFound" xml:space="preserve">
    <value>The specified user is not an admin of the hackathon</value>
  </data>
  <data name="Auth_Forbidden" xml:space="preserve">
    <value>Forbidden. The user associated with the token doesn't have proper permission. Please contact the administrator for access.</value>
  </data>
  <data name="Auth_TokenExpired" xml:space="preserve">
    <value>Token expired at {0}. Please re-login.</value>
  </data>
  <data name="Auth_Token_ValidateRemoteFailed" xml:space="preserve">
    <value>The access token cannot be validated. Code:{0}, Message:{1}</value>
  </data>
  <data name="Auth_Unauthorized" xml:space="preserve">
    <value>Token is either missing or invalid. Please add it to Http request headers: Headers["Authorization"]=token TOKEN. </value>
  </data>
  <data name="AwardAssignment_NotFound" xml:space="preserve">
    <value>The assignment is not found.</value>
  </data>
  <data name="Award_CannotDeleteAssigned" xml:space="preserve">
    <value>The award is assigned hence cannot delete. Please delete the assignments first.</value>
  </data>
  <data name="Award_CannotUpdateTarget" xml:space="preserve">
    <value>`award.target` cannot be updated since the award is already assigned to a team or user. Please delete the assignment(s) first.</value>
  </data>
  <data name="Award_NotFound" xml:space="preserve">
    <value>Award with specified id is not found.</value>
  </data>
  <data name="Award_TooMany" xml:space="preserve">
    <value>A maximum of 100 awards are allowed.</value>
  </data>
  <data name="Award_TooManyAssignments" xml:space="preserve">
    <value>Cannot assign the award to more than {0} assignees.</value>
  </data>
  <data name="Enrollment_Ended" xml:space="preserve">
    <value>Enrollment already ended at {0}</value>
  </data>
  <data name="Enrollment_Full" xml:space="preserve">
    <value>Enrollment cannot be fullfilled since it has reached the quota.</value>
  </data>
  <data name="Enrollment_NotApproved" xml:space="preserve">
    <value>Enrollment not approved yet. Please contact the hackathon admistrators for approval.</value>
  </data>
  <data name="Enrollment_NotFound" xml:space="preserve">
    <value>User {0} not enrolled in hackathon {1}</value>
  </data>
  <data name="Enrollment_NotStarted" xml:space="preserve">
    <value>Enrollment not started. The enrollment will be accepted starting from {0}</value>
  </data>
  <data name="Enrollment_TooManyExtensions" xml:space="preserve">
    <value>Count of extensions exceeds the allowed limit {0}.</value>
  </data>
  <data name="Experiment_NotFound" xml:space="preserve">
    <value>The experiment is not found.</value>
  </data>
  <data name="Experiment_UserNotMatch" xml:space="preserve">
    <value>Forbidden. The experiment is owned by another user.</value>
  </data>
  <data name="Hackathon_AlreadyOnline" xml:space="preserve">
    <value>Hackathon {0} is already Online.</value>
  </data>
  <data name="Hackathon_CreateTooMany" xml:space="preserve">
    <value>The user created too many hackathons, please try again at a later time or contact the administrator.</value>
  </data>
  <data name="Hackathon_Ended" xml:space="preserve">
    <value>The hackathon is already ended at {0}</value>
  </data>
  <data name="Hackathon_HasAwardAssignment" xml:space="preserve">
    <value>Hackathon is not allowed to delete since there are active award assignments. Please revoke the award assignments first.</value>
  </data>
  <data name="Hackathon_Name_Invalid" xml:space="preserve">
    <value>The name is invalid. Must contain only letters and/or numbers, length between 1 and 100.</value>
  </data>
  <data name="Hackathon_Name_Taken" xml:space="preserve">
    <value>The name is already used. Please try another name.</value>
  </data>
  <data name="Hackathon_NotAdmin" xml:space="preserve">
    <value>Access denied. Only the admins of the hackathon are allowed. Please contact the admin to request access.</value>
  </data>
  <data name="Hackathon_NotFound" xml:space="preserve">
    <value>Hackathon with name `{0}` not found. Try PUT to create a new one.</value>
  </data>
  <data name="Hackathon_NotJudge" xml:space="preserve">
    <value>Access denied. Only the judges of the hackathon are allowed. Please contact the admin to request access.</value>
  </data>
  <data name="Hackathon_NotOnline" xml:space="preserve">
    <value>Requested operation is not allowed since the hackathon is not online</value>
  </data>
  <data name="Hackathon_NotStarted" xml:space="preserve">
    <value>The hackathon is not started yet. </value>
  </data>
  <data name="Hackathon_ReadOnly" xml:space="preserve">
    <value>Hackathon is archived and is ReadOnly.</value>
  </data>
  <data name="Hackathon_UnhandledException" xml:space="preserve">
    <value>An unexpected exception occurs. Please try again later or report an issue at https://github.com/kaiyuanshe/open-hackathon/issues</value>
  </data>
  <data name="Judge_NotFound" xml:space="preserve">
    <value>The specified user is not judge of the hackathon.</value>
  </data>
  <data name="Judge_TooMany" xml:space="preserve">
    <value>A maximum of 100 judges are allowed.</value>
  </data>
  <data name="Parameter_Required" xml:space="preserve">
    <value>Required parameter {0} is null or empty.</value>
  </data>
  <data name="Rating_HasRating" xml:space="preserve">
    <value>Cannot delete the {0}. Must delete related Rating first.</value>
  </data>
  <data name="Rating_KindNotFound" xml:space="preserve">
    <value>The rating kind of specified Id doesn't exist.</value>
  </data>
  <data name="Rating_NotFound" xml:space="preserve">
    <value>The rating is not found.</value>
  </data>
  <data name="Rating_OnlyCreator" xml:space="preserve">
    <value>Access denied. The rating is created by another person.</value>
  </data>
  <data name="Rating_ScoreNotInRange" xml:space="preserve">
    <value>The score must be not greater than {0}.</value>
  </data>
  <data name="Rating_TooManyKinds" xml:space="preserve">
    <value>A maximum of 100 rating kinds are allowed.</value>
  </data>
  <data name="TeamMember_AccessDenied" xml:space="preserve">
    <value>Member {0} is not allowed to perform this operation.</value>
  </data>
  <data name="TeamMember_CannotChangeTeam" xml:space="preserve">
    <value>The user is in a different team. Please leave the current team if want to change a team.</value>
  </data>
  <data name="TeamMember_LastAdmin" xml:space="preserve">
    <value>The user cannot be removed since there are more than 1 members and the user is the only admin with admin access.</value>
  </data>
  <data name="TeamMember_NotFound" xml:space="preserve">
    <value>User {0} is not a member of team {1}</value>
  </data>
  <data name="TeamWork_NotFound" xml:space="preserve">
    <value>The team work cannot be found.</value>
  </data>
  <data name="TeamWork_TooMany" xml:space="preserve">
    <value>A maximum of 100 works are allowed.</value>
  </data>
  <data name="Team_CreateSecond" xml:space="preserve">
    <value>Cannot create a new team since the user is already in a team.</value>
  </data>
  <data name="Team_HasAward" xml:space="preserve">
    <value>Cannot delete the team for awards are assigned to this team. Please delete the award assignments first.</value>
  </data>
  <data name="Team_NameTaken" xml:space="preserve">
    <value>The team name '{0}' is already taken. Please try a different name.</value>
  </data>
  <data name="Team_NotAdmin" xml:space="preserve">
    <value>Access denied. Please contact admins of the team.</value>
  </data>
  <data name="Team_NotEnrolled" xml:space="preserve">
    <value>Cannot create a new team. must enroll first.</value>
  </data>
  <data name="Team_NotFound" xml:space="preserve">
    <value>Team with specified id is not found.</value>
  </data>
  <data name="Team_NotJoined" xml:space="preserve">
    <value>The current user doesn't join a team. </value>
  </data>
  <data name="Template_ExceedMax" xml:space="preserve">
    <value>Cannot create more than {0} templates in a hackathon.</value>
  </data>
  <data name="Template_HasExperiment" xml:space="preserve">
    <value>Cannot delete the template since it's being used by one or more experiments. Please delete the experiments first.</value>
  </data>
  <data name="Template_NotFound" xml:space="preserve">
    <value>Template `{0}` cannot be found in hackathon `{1}`.</value>
  </data>
  <data name="User_NotFound" xml:space="preserve">
    <value>The specified user is not found.</value>
  </data>
</root>