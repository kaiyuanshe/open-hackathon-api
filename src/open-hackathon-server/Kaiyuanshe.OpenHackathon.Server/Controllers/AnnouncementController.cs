using Kaiyuanshe.OpenHackathon.Server.Auth;
using Kaiyuanshe.OpenHackathon.Server.Biz;
using Kaiyuanshe.OpenHackathon.Server.Biz.Options;
using Kaiyuanshe.OpenHackathon.Server.Models;
using Kaiyuanshe.OpenHackathon.Server.Models.Validations;
using Kaiyuanshe.OpenHackathon.Server.Storage.Entities;
using Kaiyuanshe.OpenHackathon.Server.Swagger;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;

namespace Kaiyuanshe.OpenHackathon.Server.Controllers
{
    public class AnnouncementController : HackathonControllerBase
    {
        #region CreateAnnouncement
        /// <summary>
        /// Add a new announcement.
        /// </summary>
        /// <param name="hackathonName" example="foo">Name of hackathon. Case-insensitive.
        /// Must contain only letters and/or numbers, length between 1 and 100</param>
        /// <returns>The created announcement.</returns>
        /// <response code="200">Success. The response describes an announcement.</response>
        [HttpPut]
        [ProducesResponseType(typeof(Announcement), StatusCodes.Status200OK)]
        [SwaggerErrorResponse(400, 404)]
        [Route("hackathon/{hackathonName}/announcement")]
        [Authorize(Policy = AuthConstant.PolicyForSwagger.HackathonAdministrator)]
        public async Task<object> CreateAnnouncement(
            [FromRoute, Required, RegularExpression(ModelConstants.HackathonNamePattern)] string hackathonName,
            [FromBody, HttpPutPolicy] Announcement parameter,
            CancellationToken cancellationToken)
        {
            // validate hackathon
            var hackathon = await HackathonManagement.GetHackathonEntityByNameAsync(hackathonName.ToLower(), cancellationToken);
            var options = new ValidateHackathonOptions
            {
                HackAdminRequird = true,
                HackathonName = hackathonName,
            };
            if (await ValidateHackathon(hackathon, options, cancellationToken) == false)
            {
                return options.ValidateResult;
            }

            // create announcement
            Debug.Assert(hackathon != null);
            parameter.hackathonName = hackathon.Name;
            var entity = await AnnouncementManagement.Create(parameter, cancellationToken);

            var args = new
            {
                hackathonName = hackathon.DisplayName,
                adminName = CurrentUserDisplayName,
            };
            await ActivityLogManagement.OnHackathonEvent(hackathon.Name, CurrentUserId,
                ActivityLogType.createAnnouncement, args, cancellationToken);

            var resp = ResponseBuilder.BuildAnnouncement(entity);
            return Ok(resp);
        }
        #endregion

        #region GetAnnouncement
        /// <summary>
        /// Get an announcement by id.
        /// </summary>
        /// <param name="hackathonName" example="foo">Name of hackathon. Case-insensitive.
        /// Must contain only letters and/or numbers, length between 1 and 100</param>
        /// <param name="announcementId" example="fa896287-ab7a-4429-a84d-701d8d312a28">Unique id of announcement. Generated by server. Please call the list api to query the id.</param>
        /// <returns>The announcement.</returns>
        /// <response code="200">Success. The response describes an announcement.</response>
        [HttpGet]
        [ProducesResponseType(typeof(Announcement), StatusCodes.Status200OK)]
        [SwaggerErrorResponse(400, 404)]
        [Route("hackathon/{hackathonName}/announcement/{announcementId}")]
        public async Task<object> GetAnnouncement(
            [FromRoute, Required, RegularExpression(ModelConstants.HackathonNamePattern)] string hackathonName,
            [FromRoute, Required, Guid] string announcementId,
            CancellationToken cancellationToken)
        {
            // validate hackathon
            var hackathon = await HackathonManagement.GetHackathonEntityByNameAsync(hackathonName.ToLower(), cancellationToken);
            var options = new ValidateHackathonOptions
            {
                HackathonName = hackathonName,
                WritableRequired = false,
            };
            if (await ValidateHackathon(hackathon, options, cancellationToken) == false)
            {
                return options.ValidateResult;
            }
            Debug.Assert(hackathon != null);

            // query and update organizer.
            var entity = await AnnouncementManagement.GetById(hackathon.Name, announcementId, cancellationToken);
            if (entity == null)
            {
                return NotFound(Resources.Announcement_NotFound);
            }
            var resp = ResponseBuilder.BuildAnnouncement(entity);
            return Ok(resp);
        }
        #endregion

        #region UpdateAnnouncement
        /// <summary>
        /// Update an announcement by id.
        /// </summary>
        /// <param name="hackathonName" example="foo">Name of hackathon. Case-insensitive.
        /// Must contain only letters and/or numbers, length between 1 and 100</param>
        /// <param name="announcementId" example="fa896287-ab7a-4429-a84d-701d8d312a28">Unique id of announcement. Generated by server. Please call the list api to query the id.</param>
        /// <returns>The updated announcement.</returns>
        /// <response code="200">Success. The response describes an announcement.</response>
        [HttpPatch]
        [ProducesResponseType(typeof(Announcement), StatusCodes.Status200OK)]
        [SwaggerErrorResponse(400, 404)]
        [Route("hackathon/{hackathonName}/announcement/{announcementId}")]
        [Authorize(Policy = AuthConstant.PolicyForSwagger.HackathonAdministrator)]
        public async Task<object> UpdateAnnouncement(
            [FromRoute, Required, RegularExpression(ModelConstants.HackathonNamePattern)] string hackathonName,
            [FromRoute, Required, Guid] string announcementId,
            [FromBody, Required] Announcement parameter,
            CancellationToken cancellationToken)
        {
            // validate hackathon
            var hackathon = await HackathonManagement.GetHackathonEntityByNameAsync(hackathonName.ToLower(), cancellationToken);
            var options = new ValidateHackathonOptions
            {
                HackAdminRequird = true,
                HackathonName = hackathonName,
            };
            if (await ValidateHackathon(hackathon, options, cancellationToken) == false)
            {
                return options.ValidateResult;
            }
            Debug.Assert(hackathon != null);

            // query and update organizer.
            var announcementEntity = await AnnouncementManagement.GetById(hackathon.Name, announcementId, cancellationToken);
            if (announcementEntity == null)
            {
                return NotFound(Resources.Announcement_NotFound);
            }
            announcementEntity = await AnnouncementManagement.Update(announcementEntity, parameter, cancellationToken);

            // logs
            var args = new
            {
                hackathonName = hackathon.DisplayName,
                adminName = CurrentUserDisplayName,
            };
            await ActivityLogManagement.OnHackathonEvent(hackathon.Name, CurrentUserId,
                ActivityLogType.updateAnnouncement, args, cancellationToken);

            var resp = ResponseBuilder.BuildAnnouncement(announcementEntity);
            return Ok(resp);
        }
        #endregion

        #region ListByHackathon
        /// <summary>
        /// List paginated announcements of a hackathon.
        /// </summary>
        /// <param name="hackathonName" example="foo">Name of hackathon. Case-insensitive.
        /// Must contain only letters and/or numbers, length between 1 and 100</param>
        /// <returns>the response contains a list of announcements and a nextLink if there are more results.</returns>
        /// <response code="200">Success. The response describes a list of organizers and a nullable link to query more results.</response>
        [HttpGet]
        [ProducesResponseType(typeof(AnnouncementList), StatusCodes.Status200OK)]
        [SwaggerErrorResponse(400, 404)]
        [Route("hackathon/{hackathonName}/announcements")]
        public async Task<object> ListByHackathon(
            [FromRoute, Required, RegularExpression(ModelConstants.HackathonNamePattern)] string hackathonName,
            [FromQuery] Pagination pagination,
            CancellationToken cancellationToken)
        {
            // validate hackathon
            var hackathon = await HackathonManagement.GetHackathonEntityByNameAsync(hackathonName.ToLower());
            var options = new ValidateHackathonOptions
            {
                HackathonName = hackathonName,
                WritableRequired = false,
            };
            if (await ValidateHackathon(hackathon, options) == false)
            {
                return options.ValidateResult;
            }
            Debug.Assert(hackathon != null);

            // query
            var queryOptions = new AnnouncementQueryOptions
            {
                HackathonName = hackathon.Name,
                Pagination = pagination,
            };
            var announcements = await AnnouncementManagement.ListPaginated(queryOptions, cancellationToken);
            var routeValues = new RouteValueDictionary();
            if (pagination.top.HasValue)
            {
                routeValues.Add(nameof(pagination.top), pagination.top.Value);
            }
            var nextLink = BuildNextLinkUrl(routeValues, queryOptions.NextPage);

            // build resp
            var resp = ResponseBuilder.BuildResourceList<AnnouncementEntity, Announcement, AnnouncementList>(
                announcements,
                ResponseBuilder.BuildAnnouncement,
                nextLink);

            return Ok(resp);
        }
        #endregion
    }
}
